class Link {
    public long dData;
    public Link next;
    public Link previous;
    public Link(long d) {
        dData = d;
    }
    public void displayLink() {
        System.out.print(dData + " ");
    }
}
class FirstLastList {
    private Link first;
    private Link last;
    public FirstLastList() {
        first = null;
        last = null;
    }
    public boolean isEmpty() {
        return first == null;
    }
    public void insertFirst(long dd) {
        Link newLink = new Link(dd);
        if(isEmpty()) {
            last = newLink;
        } else {
            first.previous = newLink;
        }
        newLink.next = first;
        first = newLink;
    }
    public void insertLast(long dd) {
        Link newLink = new Link(dd);
        if(isEmpty()) {
            first = newLink;
        } else {
            last.next = newLink;
            newLink.previous = last;   
        }
        last = newLink;
    }
    public long deleteFirst() {
        long temp = first.dData;
        if(first.next == null) {
            last = null;
        }
        first = first.next;
        return temp;
    }
    public void displayList() {
        System.out.print("List (first --> last): ");
        Link current = first;
        while(current != null) {
            current.displayLink();
            current = current.next;
        }
        System.out.println(" ");
    }
    
    
    public void displayBackwards() {
        System.out.print("List (last --> first): ");
        Link current = last;
        while(current != null) {
            current.displayLink();
            current = current.previous;
        }
        System.out.println(" ");
    }
}
public class FirstLastApp {
    public static void main(String[] args) {
        FirstLastList theList = new FirstLastList();
        theList.insertFirst(12);
        theList.insertFirst(35);
        theList.insertFirst(6);
        theList.insertLast(8);
        theList.insertLast(27);
        theList.insertLast(51);
        theList.displayList();
        theList.deleteFirst();
        theList.deleteFirst();
        theList.displayList();
        theList.displayBackwards();
    }
}
